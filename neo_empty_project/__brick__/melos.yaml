name: {{appName.snakeCase()}}

packages:
  - apps/*
  - modules/*
  - packages/*
  - shared/*

command:
  bootstrap:
    environment:
      sdk: ">=3.6.0 <4.0.0"
    dev_dependencies:
      build_runner: ^2.4.15
      very_good_analysis: ^7.0.0
    hooks:
      post: melos run initialize-app
    runPubGetInParallel: false
scripts:
  analyze:select:
    run: melos exec -- "flutter analyze lib test"
    description: "Run flutter analyze in selected package that depends on it."
    packageFilters:
      dependsOn:
        - "flutter"
      dirExists: test
  analyze:
    run: melos run analyze:select --no-select
    description: "Run flutter analyze in all of packages that depends on it."
  generate-env:
    run: melos exec -- "dart run build_runner build -d"
    description: "Run build_runner in all of the packages that depends on it."
    packageFilters:
      scope: "*config*"
      dependsOn:
        - "envied_generator"
  generate-icons-and-flavor:
    run: melos exec -- "dart scripts/gen_icons_and_flavor.dart"
    description: "Run gen_icons_and_flavor in jnp."
    packageFilters:
      dependsOn:
        - "flutter_launcher_icons"
        - "flutter_flavorizr"
  generate-locale:
    run: melos exec -- "dart scripts/gen_arb.dart"
    description: "Generate arb from files."
  generate-assets:
    run: melos exec -- "dart run build_runner build -d"
    description: "Generate asset for UI Kit Package"
    packageFilters:
      scope: "*ui_kit*"
  generate-core:
    run: melos exec -- "dart run build_runner build -d"
    description: "Generate core"
    packageFilters:
      scope: "*core*"
  build:select:
    run: melos exec -- "dart run build_runner build -d"
    description: "Run build runner in selected package that depends on build_runner."
    packageFilters:
      ignore:
        - "*core*"
        - "*l10n*"
        - "*config*"
      dependsOn:
        - "build_runner"
  build-android:
    run: melos exec -- "flutter build appbundle --release --flavor=prod && flutter build apk --release --flavor=prod"
    description: "Run build android in Jnp Mobile."
    packageFilters:
      scope: "*jnp_mobile*"
  build-admin:
    run: melos exec -- "flutter build web --dart-define=flavor=${FLAVOR}"
    description: "Run build android in Jnp Mobile."
    packageFilters:
      scope: "*jnp_admin*"
  build:
    run: melos run build:select --no-select
    description: "Run build runner in all packages that depend on it."
    orderDependents: true
    packageFilters:
      dependsOn:
        - "build_runner"

  build:clean:select:
    run: melos exec -- "dart run build_runner clean"
    description: "Run build runner clean in selected package that depends on build_runner."
    packageFilters:
      dependsOn:
        - "build_runner"
  build:clean:
    run: melos run build:clean:select --no-select
    description: "Run build runner clean in all packages that depend on it."
  format:
    run: melos exec -- "dart format . --fix && dart fix --apply"
    description: "Run dart format and dart fix for all packages"
  format-check:
    run: melos exec -- "dart format . --set-exit-if-changed"
  get:select:
    run: melos exec -- "flutter pub get"
    description: "Run `flutter pub get` in selected package."
    packageFilters:
      dependsOn: flutter
  get:
    run: melos run get:select --no-select
    description: "Run `flutter pub get` in all packages that depends on Flutter."
  upgrade:select:
    run: melos exec -- "flutter pub upgrade"
    description: "Run `flutter pub upgrade` in selected package."
    packageFilters:
      dependsOn: "flutter"
  upgrade:
    run: melos run upgrade:select --no-select
    description: "Run `flutter pub upgrade` in all packages."
  initialize-app:
    run: |
      melos run get
      melos run generate-env
      melos run generate-assets
      melos run build
      melos run generate-core
      melos run generate-icons-and-flavor
      melos run format
    description: Initialize {{appName.pascalCase()}}.
